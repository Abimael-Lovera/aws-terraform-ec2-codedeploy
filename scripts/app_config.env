#!/bin/bash
# Arquivo de configuração global para scripts de deployment
# Este arquivo deve ser 'sourced' pelos outros scripts

# Configurações da Aplicação
export APP_NAME="contador-app"
export APP_USER="appuser"
export APP_GROUP="appuser"
export APP_HOME="/opt/app"
export APP_JAR_PATTERN="app-*.jar"

# Configurações de Sistema
export JAVA_VERSION="java-17-amazon-corretto-headless"
export SYSTEMD_SERVICE_NAME="contador-app"

# Configurações de Rede
export APP_HOST="localhost"
export APP_PORT="8080"
export HEALTH_ENDPOINT="/healthcheck"

# Configurações de Logs
export LOG_DIR="/var/log"
export APP_LOG_FILE="${LOG_DIR}/app.log"
export INSTALL_LOG_FILE="${LOG_DIR}/app_install.log"
export DEPLOY_LOG_FILE="${LOG_DIR}/app_deploy.log"

# Configurações de PID
export PID_DIR="/var/run"
export PID_FILE="${PID_DIR}/app.pid"

# Configurações de Validação
export HEALTH_CHECK_RETRIES=15
export HEALTH_CHECK_SLEEP=2
export HEALTH_CHECK_URL="http://${APP_HOST}:${APP_PORT}${HEALTH_ENDPOINT}"

# Configurações do Systemd Service
export SYSTEMD_SERVICE_FILE="/etc/systemd/system/${SYSTEMD_SERVICE_NAME}.service"
export SYSTEMD_DESCRIPTION="Contador Spring Boot Application"
export SYSTEMD_AFTER="network.target"

# Timeouts (em segundos)
export STOP_TIMEOUT=30
export START_TIMEOUT=60
export VALIDATION_TIMEOUT=30

# Função para logging padronizado
log_info() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] $1"
}

log_warn() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [WARN] $1"
}

log_error() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] $1" >&2
}

# Função para encontrar o JAR da aplicação
find_app_jar() {
    local jar_file=$(ls ${APP_HOME}/${APP_JAR_PATTERN} 2>/dev/null | head -n1)
    if [ -z "$jar_file" ]; then
        log_error "JAR não encontrado em ${APP_HOME}/${APP_JAR_PATTERN}"
        return 1
    fi
    echo "$jar_file"
}

# Função para verificar se processo está rodando
is_app_running() {
    # Primeiro tenta via systemd se o serviço existir
    if systemctl list-unit-files | grep -q "^${SYSTEMD_SERVICE_NAME}.service" 2>/dev/null; then
        if systemctl is-active --quiet "$SYSTEMD_SERVICE_NAME" 2>/dev/null; then
            return 0
        fi
    fi
    
    # Fallback para verificação via PID file
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE" 2>/dev/null)
        if [ -n "$pid" ] && kill -0 "$pid" 2>/dev/null; then
            return 0
        fi
    fi
    return 1
}

# Função para criar usuário se não existir
ensure_app_user() {
    if ! id -u "$APP_USER" >/dev/null 2>&1; then
        log_info "Criando usuário $APP_USER"
        useradd -r -s /sbin/nologin "$APP_USER"
    else
        log_info "Usuário $APP_USER já existe"
    fi
}

# Função para criar diretórios necessários
ensure_directories() {
    mkdir -p "$APP_HOME" "$LOG_DIR" "$PID_DIR"
    chown -R "${APP_USER}:${APP_GROUP}" "$APP_HOME"
}

# Função para verificar se Java está instalado
ensure_java() {
    if ! command -v java >/dev/null 2>&1; then
        log_info "Instalando $JAVA_VERSION"
        dnf install -y "$JAVA_VERSION"
    else
        log_info "Java já instalado: $(java -version 2>&1 | head -n1)"
    fi
}

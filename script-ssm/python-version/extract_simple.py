#!/usr/bin/env python3
"""
Script simples para extrair appsettings.json de servidores Windows via SSM
"""

import boto3
import json
import time
import sys
from datetime import datetime
from pathlib import Path

def main():
    # Configura√ß√µes b√°sicas
    if len(sys.argv) < 2:
        print("Uso: python extract_simple.py <aws_profile>")
        print("Exemplo: python extract_simple.py meu-profile")
        sys.exit(1)
    
    aws_profile = sys.argv[1]
    server_filter = "SI2"
    target_path = r"D:\Sites\Api"
    
    print(f"üöÄ Extrator AppSettings - Profile: {aws_profile}")
    print("-" * 50)
    
    # Inicializar clientes AWS
    try:
        session = boto3.Session(profile_name=aws_profile)
        ec2 = session.client('ec2')
        ssm = session.client('ssm')
        print("‚úÖ Conectado √† AWS")
    except Exception as e:
        print(f"‚ùå Erro ao conectar AWS: {e}")
        sys.exit(1)
    
    # Buscar inst√¢ncias Windows
    print(f"üîç Buscando servidores Windows com '{server_filter}'...")
    try:
        response = ec2.describe_instances(
            Filters=[
                {'Name': 'platform', 'Values': ['windows']},
                {'Name': 'instance-state-name', 'Values': ['running']},
                {'Name': 'tag:Name', 'Values': [f'*{server_filter}*']}
            ]
        )
        
        instances = []
        for reservation in response['Reservations']:
            for instance in reservation['Instances']:
                name = 'Unknown'
                for tag in instance.get('Tags', []):
                    if tag['Key'] == 'Name':
                        name = tag['Value']
                        break
                
                instances.append({
                    'id': instance['InstanceId'],
                    'name': name,
                    'ip': instance.get('PrivateIpAddress', 'N/A')
                })
        
        print(f"üìã Encontradas {len(instances)} inst√¢ncias:")
        for inst in instances:
            print(f"  - {inst['name']} ({inst['id']})")
        
    except Exception as e:
        print(f"‚ùå Erro ao buscar inst√¢ncias: {e}")
        sys.exit(1)
    
    if not instances:
        print("‚ùå Nenhuma inst√¢ncia encontrada")
        sys.exit(1)
    
    # Criar diret√≥rio de backup
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_dir = Path(f'backup_appsettings_{timestamp}')
    backup_dir.mkdir(exist_ok=True)
    print(f"üìÅ Salvando em: {backup_dir}")
    
    # Processar cada inst√¢ncia
    success_count = 0
    for inst in instances:
        print(f"\nüîÑ Processando: {inst['name']}")
        
        # Verificar SSM
        try:
            ssm_response = ssm.describe_instance_information(
                InstanceInformationFilterList=[
                    {'key': 'InstanceIds', 'valueSet': [inst['id']]}
                ]
            )
            
            if not ssm_response['InstanceInformationList']:
                print(f"  ‚ùå SSM n√£o dispon√≠vel")
                continue
                
            ssm_status = ssm_response['InstanceInformationList'][0]['PingStatus']
            if ssm_status != 'Online':
                print(f"  ‚ùå SSM offline: {ssm_status}")
                continue
                
            print(f"  ‚úÖ SSM online")
            
        except Exception as e:
            print(f"  ‚ùå Erro SSM: {e}")
            continue
        
        # Obter hostname
        try:
            cmd_response = ssm.send_command(
                InstanceIds=[inst['id']],
                DocumentName='AWS-RunPowerShellScript',
                Parameters={'commands': ['$env:COMPUTERNAME']}
            )
            
            time.sleep(3)
            
            result = ssm.get_command_invocation(
                CommandId=cmd_response['Command']['CommandId'],
                InstanceId=inst['id']
            )
            
            hostname = result['StandardOutputContent'].strip()
            print(f"  üñ•Ô∏è  Hostname: {hostname}")
            
        except Exception as e:
            print(f"  ‚ö†Ô∏è  Erro ao obter hostname: {e}")
            hostname = inst['name']
        
        # Extrair arquivos
        files_extracted = 0
        inst_dir = backup_dir / inst['name']
        inst_dir.mkdir(exist_ok=True)
        
        # Lista de arquivos para extrair
        files_to_extract = [
            'appsettings.json',
            f'appsettings.{hostname}.json'
        ]
        
        for filename in files_to_extract:
            try:
                file_path = f"{target_path}\\{filename}"
                
                # Comando para ler arquivo
                cmd_response = ssm.send_command(
                    InstanceIds=[inst['id']],
                    DocumentName='AWS-RunPowerShellScript',
                    Parameters={
                        'commands': [f"if (Test-Path '{file_path}') {{ Get-Content '{file_path}' -Raw }} else {{ 'FILE_NOT_FOUND' }}"]
                    }
                )
                
                time.sleep(5)
                
                result = ssm.get_command_invocation(
                    CommandId=cmd_response['Command']['CommandId'],
                    InstanceId=inst['id']
                )
                
                content = result['StandardOutputContent']
                
                if content.strip() != 'FILE_NOT_FOUND' and content.strip():
                    # Salvar arquivo
                    local_file = inst_dir / filename
                    local_file.write_text(content, encoding='utf-8')
                    print(f"  ‚úÖ Extra√≠do: {filename}")
                    files_extracted += 1
                else:
                    print(f"  ‚ùå N√£o encontrado: {filename}")
                    
            except Exception as e:
                print(f"  ‚ùå Erro ao extrair {filename}: {e}")
        
        # Salvar metadados
        metadata = {
            'instance_id': inst['id'],
            'instance_name': inst['name'],
            'hostname': hostname,
            'ip': inst['ip'],
            'extraction_date': datetime.now().isoformat(),
            'files_extracted': files_extracted
        }
        
        metadata_file = inst_dir / 'metadata.json'
        metadata_file.write_text(json.dumps(metadata, indent=2), encoding='utf-8')
        
        if files_extracted > 0:
            success_count += 1
            print(f"  ‚úÖ Conclu√≠do: {files_extracted} arquivos")
        else:
            print(f"  ‚ùå Nenhum arquivo extra√≠do")
    
    # Resumo final
    print(f"\n{'='*50}")
    print(f"üìä RESUMO:")
    print(f"  Inst√¢ncias encontradas: {len(instances)}")
    print(f"  Inst√¢ncias com sucesso: {success_count}")
    print(f"  Diret√≥rio de backup: {backup_dir}")
    print(f"{'='*50}")
    
    if success_count > 0:
        print("üéâ Extra√ß√£o conclu√≠da com sucesso!")
        
        # Listar arquivos extra√≠dos
        json_files = list(backup_dir.rglob("*.json"))
        json_files = [f for f in json_files if f.name != 'metadata.json']
        
        if json_files:
            print("\nüìÅ Arquivos extra√≠dos:")
            for file_path in sorted(json_files):
                relative_path = file_path.relative_to(backup_dir)
                print(f"  {relative_path}")
    else:
        print("‚ùå Nenhum arquivo foi extra√≠do")

if __name__ == '__main__':
    main()
